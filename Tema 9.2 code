#include <iostream>
#include <vector>
#include <random>

using namespace std;

// Funcție pentru a verifica dacă un număr este prim
bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i = i + 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}

// Funcție pentru a genera un număr prim aleator
int generatePrime(int min, int max) {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> distrib(min, max);

    int p = distrib(gen);
    while (!isPrime(p)) {
        p = distrib(gen);
    }
    return p;
}

// Funcție pentru a calcula puterea modulară rapidă (a^b mod n)
int modPow(int a, int b, int n) {
    int result = 1;
    a = a % n;
    while (b > 0) {
        if (b & 1) {
            result = (result * a) % n;
        }
        b = b >> 1;
        a = (a * a) % n;
    }
    return result;
}

// Funcție pentru a genera cheile publice și private pentru criptosistemul Massey-Omura
void generateKeys(int& p, int& g, int& a, int& b) {
    // Generăm un număr prim pentru corpul finit
    p = generatePrime(100, 1000);

    // Alegem un generator g pentru grupul Z_p^*
    g = 2;
    while (modPow(g, (p - 1) / 2, p) == 1) {
        g++;
    }

    // Alegem două numere întregi aleatoare a și b
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> distrib(2, p - 2);
    a = distrib(gen);
    b = distrib(gen);
}

// Funcție pentru a cripta un mesaj folosind criptosistemul Massey-Omura
vector<int> encrypt(const string& message, int p, int g, int a) {
    vector<int> encrypted;
    for (char c : message) {
        int m = c;
        int r = generatePrime(2, p - 1);
        int c1 = modPow(g, r, p);
        int c2 = (modPow(a, r, p) * m) % p;
        encrypted.push_back(c1);
        encrypted.push_back(c2);
    }
    return encrypted;
}

// Funcție pentru a decripta un mesaj criptat folosind criptosistemul Massey-Omura
string decrypt(const vector<int>& encrypted, int p, int b) {
    string decrypted;
    for (size_t i = 0; i < encrypted.size(); i += 2) {
        int c1 = encrypted[i];
        int c2 = encrypted[i + 1];
        int m = (c2 * modPow(c1, p - 1 - b, p)) % p;
        decrypted.push_back(char(m));
    }
    return decrypted;
}

int main() {
    int p, g, a, b;
    generateKeys(p, g, a, b);
    cout << "Cheia publica: (p=" << p << ", g=" << g << ", a=" << a << ")" << endl;
    cout << "Cheia privata: b=" << b << endl;

    string message;
    cout << "Introduceti mesajul: ";
    getline(cin, message);

    vector<int> encrypted = encrypt(message, p, g, a);
    cout << "Mesajul criptat: ";
    for (int c : encrypted) {
        cout << c << " ";
    }
    cout << endl;

    string decrypted = decrypt(encrypted, p, b);
    cout << "Mesajul decriptat: " << decrypted << endl;

    return 0;
}
